diff -rupN original/qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm patch/qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm
--- original/qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm	2015-05-29 13:30:38.000000000 -0700
+++ patch/qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm	2018-01-26 09:29:44.000000000 -0800
@@ -81,7 +81,7 @@ void QCocoaCursor::setPos(const QPoint &
     pos.x = position.x();
     pos.y = position.y();
 
-    CGEventRef e = CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, 0);
+    CGEventRef e = CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, kCGMouseButtonLeft);
     CGEventPost(kCGHIDEventTap, e);
     CFRelease(e);
 }
diff -rupN original/qtbase/src/tools/qlalr/lalr.cpp patch/qtbase/src/tools/qlalr/lalr.cpp
--- original/qtbase/src/tools/qlalr/lalr.cpp	2015-05-29 13:30:29.000000000 -0700
+++ patch/qtbase/src/tools/qlalr/lalr.cpp	2018-01-26 09:29:06.000000000 -0800
@@ -238,11 +238,11 @@ void Grammar::buildExtendedGrammar ()
   non_terminals.insert (accept_symbol);
 }
 
-struct _Nullable: public std::unary_function<Name, bool>
+struct Nullable: public std::unary_function<Name, bool>
 {
   Automaton *_M_automaton;
 
-  _Nullable (Automaton *aut):
+  Nullable (Automaton *aut):
     _M_automaton (aut) {}
 
   bool operator () (Name name) const
@@ -300,7 +300,7 @@ void Automaton::buildNullables ()
 
       for (RulePointer rule = _M_grammar->rules.begin (); rule != _M_grammar->rules.end (); ++rule)
         {
-          NameList::iterator nn = std::find_if (rule->rhs.begin (), rule->rhs.end (), std::not1 (_Nullable (this)));
+          NameList::iterator nn = std::find_if (rule->rhs.begin (), rule->rhs.end (), std::not1 (Nullable (this)));
 
           if (nn == rule->rhs.end ())
             changed |= nullables.insert (rule->lhs).second;
@@ -635,7 +635,7 @@ void Automaton::buildIncludesDigraph ()
                   if (! _M_grammar->isNonTerminal (*A))
                     continue;
 
-                  NameList::iterator first_not_nullable = std::find_if (dot, rule->rhs.end (), std::not1 (_Nullable (this)));
+                  NameList::iterator first_not_nullable = std::find_if (dot, rule->rhs.end (), std::not1 (Nullable (this)));
                   if (first_not_nullable != rule->rhs.end ())
                     continue;
 
diff -rupN original/qtwebengine/src/3rdparty/chromium/tools/gyp/pylib/gyp/xcode_emulation.py patch/qtwebengine/src/3rdparty/chromium/tools/gyp/pylib/gyp/xcode_emulation.py
--- original/qtwebengine/src/3rdparty/chromium/tools/gyp/pylib/gyp/xcode_emulation.py	2015-05-29 13:36:41.000000000 -0700
+++ patch/qtwebengine/src/3rdparty/chromium/tools/gyp/pylib/gyp/xcode_emulation.py	2018-01-26 09:30:41.000000000 -0800
@@ -984,7 +984,23 @@ class XcodeSettings(object):
     sdk_root = self._SdkPath(config_name)
     if not sdk_root:
       sdk_root = ''
-    return l.replace('$(SDKROOT)', sdk_root)
+    # Xcode 7 started shipping with ".tbd" (text based stubs) files instead of
+    # ".dylib" without providing a real support for them. What it does, for
+    # "/usr/lib" libraries, is do "-L/usr/lib -lname" which is dependent on the
+    # library order and cause collision when building Chrome
+    #
+    # Instead substitude ".tbd" to ".dylib" in the generated project when the
+    # following conditions are both true:
+    # - library is referenced in the gyp file as "$(SDKROOT)/**/*.dylib",
+    # - the ".dylib" file does not exists but a ".tbd" file do.
+    library = l.replace('$(SDKROOT)', sdk_root)
+    if l.startswith('$(SDKROOT)'):
+      basename, ext = os.path.splitext(library)
+      if ext == '.dylib' and not os.path.exists(library):
+        tbd_library = basename + '.tbd'
+        if os.path.exists(tbd_library):
+          library = tbd_library
+    return library
 
   def AdjustLibraries(self, libraries, config_name=None):
     """Transforms entries like 'Cocoa.framework' in libraries into entries like
